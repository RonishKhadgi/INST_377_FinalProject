"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.strCut = strCut;
exports.strSpace = strSpace;
exports.strHasKey = strHasKey;
exports.isString = isString;
//截取字符串
function strCut(str, length) {
    var len = length * 2;
    var temp = void 0;
    var icount = 0;
    var patrn = /[^\x00-\xff]/;
    var strre = "";
    for (var i = 0; i < str.length; i++) {
        if (icount < len - 1) {
            temp = str.substr(i, 1);
            if (patrn.exec(temp) == null) {
                icount = icount + 1;
            } else {
                icount = icount + 2;
            }
            strre += temp;
        } else {
            break;
        }
    }
    return strre + "...";
}

//清除句子中包含得空格
function strSpace(zi) {
    var result = zi.replace(/(^\s+)|(\s+$)/g, "");
    return result.replace(/\s/g, "");
}

//str中是否包含key这个字符
function strHasKey(str, key) {
    if (typeof str !== 'string') {
        console.log('错误：这不是一个字符串');
        return false;
    }
    return str.indexOf(key) !== -1;
}

//随机类
var uid = exports.uid = function uid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
            v = c == 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
};

//是否是字符串
function isString(value) {
    return Object.prototype.toString.call(value) == "[object String]";
}

//字符串转整数
var StringToNumber = exports.StringToNumber = function StringToNumber(value) {
    return parseInt(value);
};